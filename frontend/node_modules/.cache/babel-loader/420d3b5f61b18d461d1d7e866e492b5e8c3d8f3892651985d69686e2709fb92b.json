{"ast":null,"code":"var _jsxFileName = \"/Users/tomkwong/CascadeProjects/yield-curve-viewer/frontend/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { Line } from 'react-chartjs-2';\nimport { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend, TimeScale } from 'chart.js';\nimport 'chartjs-adapter-date-fns';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend, TimeScale);\nconst API_BASE = 'http://localhost:4000/api';\nconst ANIMATION_DELAY = 100;\nfunction App() {\n  _s();\n  var _filteredCurve;\n  const [dates, setDates] = useState([]);\n  const [selectedDate, setSelectedDate] = useState('');\n  const [showDateError, setShowDateError] = useState(false);\n  const [earliestDate, setEarliestDate] = useState('');\n  const [curve, setCurve] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState('');\n  const [animating, setAnimating] = useState(false);\n\n  // Animate through all dates\n  async function animateCurve() {\n    if (dates.length === 0) return;\n    // Sort dates ascending for animation\n    const sortedDates = [...dates].sort();\n    setAnimating(true);\n    for (let i = 0; i < sortedDates.length; i++) {\n      setSelectedDate(sortedDates[i]);\n      await new Promise(res => setTimeout(res, ANIMATION_DELAY));\n    }\n    setAnimating(false);\n  }\n  useEffect(() => {\n    async function fetchDates() {\n      try {\n        const res = await fetch(`${API_BASE}/dates`);\n        const data = await res.json();\n        if (!data.dates || data.dates.length === 0) throw new Error('No dates');\n        const sorted = [...data.dates].sort();\n        // Convert all dates to yyyy-MM-dd for <input type=\"date\">\n        const toISO = d => {\n          // Accepts d as 'MM/DD/YYYY' or 'YYYY-MM-DD', returns 'YYYY-MM-DD'\n          if (/\\d{4}-\\d{2}-\\d{2}/.test(d)) return d;\n          const [mm, dd, yyyy] = d.split('/');\n          return `${yyyy}-${mm.padStart(2, '0')}-${dd.padStart(2, '0')}`;\n        };\n        const isoDates = sorted.map(toISO);\n        setDates(isoDates);\n        setEarliestDate(isoDates[0]);\n      } catch (err) {\n        setError('Failed to fetch dates');\n      }\n    }\n    fetchDates();\n  }, []);\n\n  // Always keep selectedDate in sync with dates (most recent)\n  useEffect(() => {\n    if (dates.length > 0) {\n      // If selectedDate is not in dates, set to most recent\n      if (!dates.includes(selectedDate)) {\n        setSelectedDate(dates[dates.length - 1]);\n      }\n    }\n  }, [dates]);\n\n  // Fetch curve for selected date\n  useEffect(() => {\n    if (!selectedDate) return;\n    setLoading(true);\n    setError('');\n    // Convert selectedDate from 'yyyy-MM-dd' to 'MM/DD/YYYY' for backend\n    const toBackendDate = d => {\n      if (!d) return '';\n      const [yyyy, mm, dd] = d.split('-');\n      return `${mm}/${dd}/${yyyy}`;\n    };\n    fetch(`${API_BASE}/yield-curve?date=${encodeURIComponent(toBackendDate(selectedDate))}`).then(async res => {\n      if (!res.ok) {\n        const errJson = await res.json().catch(() => ({}));\n        throw new Error(errJson.error || 'Failed to fetch yield curve');\n      }\n      return res.json();\n    }).then(data => {\n      setCurve(data.curve || []);\n      setLoading(false);\n    }).catch(err => {\n      setError('Error loading yield curve: ' + err.message);\n      setCurve([]);\n      setLoading(false);\n    });\n  }, [selectedDate, dates]);\n\n  // Helper to convert maturity label to months and to date\n  function maturityToMonths(label) {\n    const mo = label.match(/([\\d.]+)\\s*Mo/i);\n    if (mo) return parseFloat(mo[1]);\n    const yr = label.match(/([\\d.]+)\\s*YR/i);\n    if (yr) return parseFloat(yr[1]) * 12;\n    return null;\n  }\n  function maturityToDate(label) {\n    const base = new Date(2000, 0, 1);\n    const months = maturityToMonths(label.replace(/Month/i, 'Mo'));\n    if (months == null) return null;\n    const d = new Date(base);\n    d.setMonth(d.getMonth() + months);\n    return d;\n  }\n\n  // Filter out the first few maturities\n  // Remove first few maturities (1 Mo, 1.5 Mo, 2 Mo, 3 Mo, 4 Mo)\n  // Remove first few maturities (1 Mo, 1.5 Mo, 1.5 Month, 2 Mo, 3 Mo, 4 Mo)\n  // Remove first few maturities (1 Mo, 1.5 Mo, 1.5 Month, 2 Mo, 3 Mo, 4 Mo, 1 Yr)\n  const filteredCurve = curve.filter(pt => !/^([1]|2|3|4)\\s*mo$/i.test(pt.maturity.trim()) && !/^1\\.5\\s*(mo|month)$/i.test(pt.maturity.trim()) && !/^1\\s*yr$/i.test(pt.maturity.trim()));\n  console.log(\"filtered curve\");\n  console.log(filteredCurve);\n  const chartData = {\n    datasets: [{\n      label: `Yield Curve (${selectedDate})`,\n      data: filteredCurve.map(pt => ({\n        x: maturityToDate(pt.maturity),\n        y: pt.rate,\n        maturity: pt.maturity\n      })),\n      fill: false,\n      borderColor: 'rgb(75, 192, 192)',\n      cubicInterpolationMode: 'monotone'\n    }]\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      maxWidth: 700,\n      margin: '40px auto',\n      fontFamily: 'sans-serif'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"US Treasury Yield Curve Viewer\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        color: 'red',\n        marginBottom: 16\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"b\", {\n        children: \"Error:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 11\n      }, this), \" \", error]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 9\n    }, this), dates.length === 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"No dates available.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: 'flex',\n        alignItems: 'center',\n        gap: 12,\n        marginBottom: 12\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Select Date:\", ' ', /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"date\",\n          value: selectedDate,\n          onChange: e => {\n            const val = e.target.value;\n            if (!dates.includes(val)) {\n              setShowDateError(true);\n              // Don't update selectedDate\n            } else {\n              setShowDateError(false);\n              setSelectedDate(val);\n            }\n          },\n          style: {\n            fontSize: '1rem',\n            margin: '0 10px'\n          },\n          disabled: animating,\n          min: earliestDate,\n          max: dates[dates.length - 1]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 173,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: animateCurve,\n        disabled: animating || dates.length === 0,\n        style: {\n          fontSize: '1rem',\n          padding: '4px 16px',\n          cursor: animating ? 'not-allowed' : 'pointer'\n        },\n        children: animating ? 'Animating...' : 'Animate Curve'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 9\n    }, this), showDateError && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        color: 'red',\n        marginBottom: 8\n      },\n      children: [\"The earliest date is \", earliestDate]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 202,\n      columnNumber: 9\n    }, this), loading && !animating ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading chart...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 207,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(Line, {\n      data: chartData,\n      options: {\n        responsive: true,\n        animation: animating ? false : undefined,\n        plugins: {\n          legend: {\n            display: false\n          },\n          title: {\n            display: false\n          },\n          tooltip: {\n            callbacks: {\n              title: items => items[0].raw.maturity,\n              label: item => `Rate: ${item.raw.y}`\n            }\n          }\n        },\n        scales: {\n          x: {\n            type: 'time',\n            time: {\n              unit: 'month',\n              displayFormats: {\n                month: 'MMM yyyy'\n              }\n            },\n            title: {\n              display: true,\n              text: 'Maturity',\n              font: {\n                size: 14\n              }\n            },\n            ticks: {\n              source: 'data',\n              autoSkip: false,\n              callback: function (val) {\n                const match = chartData.datasets[0].data.find(d => d.x.getTime() === new Date(val).getTime());\n                return match ? match.maturity : '';\n              },\n              minRotation: 45,\n              maxRotation: 45\n            },\n            grid: {\n              display: true,\n              drawTicks: true,\n              borderColor: \"transparent\",\n              //horizontal line color above ticks (x-axis)\n              color: \"transparent\",\n              //grid lines color\n              tickColor: \"#868e96\" //ticks color (little line above points)\n            },\n            min: new Date(2000, 0, 1),\n            max: maturityToDate(((_filteredCurve = filteredCurve[filteredCurve.length - 1]) === null || _filteredCurve === void 0 ? void 0 : _filteredCurve.maturity) || '')\n          },\n          y: {\n            beginAtZero: true,\n            min: 0,\n            max: 8.0,\n            title: {\n              display: true,\n              text: 'Treasury Par Rate',\n              font: {\n                size: 14\n              }\n            },\n            grid: {\n              display: true,\n              drawTicks: true,\n              borderColor: \"transparent\",\n              //horizontal line color above ticks (x-axis)\n              color: \"transparent\",\n              //grid lines color\n              tickColor: \"#868e96\" //ticks color (little line above points)\n            }\n          }\n        }\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 209,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 160,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"GcYPRNHqvl3KlGzuAg82yAn6nTY=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","Line","Chart","ChartJS","CategoryScale","LinearScale","PointElement","LineElement","Title","Tooltip","Legend","TimeScale","jsxDEV","_jsxDEV","register","API_BASE","ANIMATION_DELAY","App","_s","_filteredCurve","dates","setDates","selectedDate","setSelectedDate","showDateError","setShowDateError","earliestDate","setEarliestDate","curve","setCurve","loading","setLoading","error","setError","animating","setAnimating","animateCurve","length","sortedDates","sort","i","Promise","res","setTimeout","fetchDates","fetch","data","json","Error","sorted","toISO","d","test","mm","dd","yyyy","split","padStart","isoDates","map","err","includes","toBackendDate","encodeURIComponent","then","ok","errJson","catch","message","maturityToMonths","label","mo","match","parseFloat","yr","maturityToDate","base","Date","months","replace","setMonth","getMonth","filteredCurve","filter","pt","maturity","trim","console","log","chartData","datasets","x","y","rate","fill","borderColor","cubicInterpolationMode","style","maxWidth","margin","fontFamily","children","fileName","_jsxFileName","lineNumber","columnNumber","color","marginBottom","display","alignItems","gap","type","value","onChange","e","val","target","fontSize","disabled","min","max","onClick","padding","cursor","options","responsive","animation","undefined","plugins","legend","title","tooltip","callbacks","items","raw","item","scales","time","unit","displayFormats","month","text","font","size","ticks","source","autoSkip","callback","find","getTime","minRotation","maxRotation","grid","drawTicks","tickColor","beginAtZero","_c","$RefreshReg$"],"sources":["/Users/tomkwong/CascadeProjects/yield-curve-viewer/frontend/src/App.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { Line } from 'react-chartjs-2';\nimport {\n  Chart as ChartJS,\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  Title,\n  Tooltip,\n  Legend,\n  TimeScale\n} from 'chart.js';\nimport 'chartjs-adapter-date-fns';\n\nChartJS.register(\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  Title,\n  Tooltip,\n  Legend,\n  TimeScale\n);\n\nconst API_BASE = 'http://localhost:4000/api';\n\nconst ANIMATION_DELAY = 100;\n\nfunction App() {\n  const [dates, setDates] = useState([]);\n  const [selectedDate, setSelectedDate] = useState('');\n  const [showDateError, setShowDateError] = useState(false);\n  const [earliestDate, setEarliestDate] = useState('');\n  const [curve, setCurve] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState('');\n  const [animating, setAnimating] = useState(false);\n\n  // Animate through all dates\n  async function animateCurve() {\n    if (dates.length === 0) return;\n    // Sort dates ascending for animation\n    const sortedDates = [...dates].sort();\n    setAnimating(true);\n    for (let i = 0; i < sortedDates.length; i++) {\n      setSelectedDate(sortedDates[i]);\n      await new Promise(res => setTimeout(res, ANIMATION_DELAY));\n    }\n    setAnimating(false);\n  }\n\n  useEffect(() => {\n    async function fetchDates() {\n      try {\n        const res = await fetch(`${API_BASE}/dates`);\n        const data = await res.json();\n        if (!data.dates || data.dates.length === 0) throw new Error('No dates');\n        const sorted = [...data.dates].sort();\n        // Convert all dates to yyyy-MM-dd for <input type=\"date\">\n        const toISO = d => {\n          // Accepts d as 'MM/DD/YYYY' or 'YYYY-MM-DD', returns 'YYYY-MM-DD'\n          if (/\\d{4}-\\d{2}-\\d{2}/.test(d)) return d;\n          const [mm, dd, yyyy] = d.split('/');\n          return `${yyyy}-${mm.padStart(2,'0')}-${dd.padStart(2,'0')}`;\n        };\n        const isoDates = sorted.map(toISO);\n        setDates(isoDates);\n        setEarliestDate(isoDates[0]);\n      } catch (err) {\n        setError('Failed to fetch dates');\n      }\n    }\n    fetchDates();\n  }, []);\n\n  // Always keep selectedDate in sync with dates (most recent)\n  useEffect(() => {\n    if (dates.length > 0) {\n      // If selectedDate is not in dates, set to most recent\n      if (!dates.includes(selectedDate)) {\n        setSelectedDate(dates[dates.length - 1]);\n      }\n    }\n  }, [dates]);\n\n  // Fetch curve for selected date\n  useEffect(() => {\n    if (!selectedDate) return;\n    setLoading(true);\n    setError('');\n    // Convert selectedDate from 'yyyy-MM-dd' to 'MM/DD/YYYY' for backend\n    const toBackendDate = d => {\n      if (!d) return '';\n      const [yyyy, mm, dd] = d.split('-');\n      return `${mm}/${dd}/${yyyy}`;\n    };\n    fetch(`${API_BASE}/yield-curve?date=${encodeURIComponent(toBackendDate(selectedDate))}`)\n      .then(async res => {\n        if (!res.ok) {\n          const errJson = await res.json().catch(() => ({}));\n          throw new Error(errJson.error || 'Failed to fetch yield curve');\n        }\n        return res.json();\n      })\n      .then(data => {\n        setCurve(data.curve || []);\n        setLoading(false);\n      })\n      .catch(err => {\n        setError('Error loading yield curve: ' + err.message);\n        setCurve([]);\n        setLoading(false);\n      });\n  }, [selectedDate, dates]);\n\n  // Helper to convert maturity label to months and to date\n  function maturityToMonths(label) {\n    const mo = label.match(/([\\d.]+)\\s*Mo/i);\n    if (mo) return parseFloat(mo[1]);\n    const yr = label.match(/([\\d.]+)\\s*YR/i);\n    if (yr) return parseFloat(yr[1]) * 12;\n    return null;\n  }\n  function maturityToDate(label) {\n    const base = new Date(2000, 0, 1);\n    const months = maturityToMonths(label.replace(/Month/i,'Mo'));\n    if (months == null) return null;\n    const d = new Date(base);\n    d.setMonth(d.getMonth() + months);\n    return d;\n  }\n\n  // Filter out the first few maturities\n  // Remove first few maturities (1 Mo, 1.5 Mo, 2 Mo, 3 Mo, 4 Mo)\n  // Remove first few maturities (1 Mo, 1.5 Mo, 1.5 Month, 2 Mo, 3 Mo, 4 Mo)\n  // Remove first few maturities (1 Mo, 1.5 Mo, 1.5 Month, 2 Mo, 3 Mo, 4 Mo, 1 Yr)\n  const filteredCurve = curve.filter(pt =>\n    !/^([1]|2|3|4)\\s*mo$/i.test(pt.maturity.trim()) &&\n    !/^1\\.5\\s*(mo|month)$/i.test(pt.maturity.trim()) &&\n    !/^1\\s*yr$/i.test(pt.maturity.trim())\n  );\n  console.log(\"filtered curve\");\n  console.log(filteredCurve);\n\n  const chartData = {\n    datasets: [\n      {\n        label: `Yield Curve (${selectedDate})`,\n        data: filteredCurve.map(pt => ({ x: maturityToDate(pt.maturity), y: pt.rate, maturity: pt.maturity })),\n        fill: false,\n        borderColor: 'rgb(75, 192, 192)',\n        cubicInterpolationMode: 'monotone',\n      }\n    ]\n  };\n\n  return (\n    <div style={{ maxWidth: 700, margin: '40px auto', fontFamily: 'sans-serif' }}>\n      <h2>US Treasury Yield Curve Viewer</h2>\n      {error && (\n        <div style={{ color: 'red', marginBottom: 16 }}>\n          <b>Error:</b> {error}\n        </div>\n      )}\n      {dates.length === 0 ? (\n        <div>No dates available.</div>\n      ) : (\n        <div style={{ display: 'flex', alignItems: 'center', gap: 12, marginBottom: 12 }}>\n          <label>\n            Select Date:{' '}\n            <input\n              type=\"date\"\n              value={selectedDate}\n              onChange={e => {\n                const val = e.target.value;\n                if (!dates.includes(val)) {\n                  setShowDateError(true);\n                  // Don't update selectedDate\n                } else {\n                  setShowDateError(false);\n                  setSelectedDate(val);\n                }\n              }}\n              style={{ fontSize: '1rem', margin: '0 10px' }}\n              disabled={animating}\n              min={earliestDate}\n              max={dates[dates.length-1]}\n            />\n          </label>\n          <button\n            onClick={animateCurve}\n            disabled={animating || dates.length === 0}\n            style={{ fontSize: '1rem', padding: '4px 16px', cursor: animating ? 'not-allowed' : 'pointer' }}\n          >\n            {animating ? 'Animating...' : 'Animate Curve'}\n          </button>\n        </div>\n      )}\n      {showDateError && (\n        <div style={{ color: 'red', marginBottom: 8 }}>\n          The earliest date is {earliestDate}\n        </div>\n      )}\n      {loading && !animating ? (\n        <div>Loading chart...</div>\n      ) : (\n        <Line data={chartData} options={{\n          responsive: true,\n          animation: animating ? false : undefined,\n          plugins: {\n            legend: { display: false },\n            title: { display: false },\n            tooltip: {\n              callbacks: { title: items => items[0].raw.maturity, label: item => `Rate: ${item.raw.y}` }\n            }\n          },\n          scales: {\n            x: {\n              type: 'time',\n              time: { unit: 'month', displayFormats: { month: 'MMM yyyy' } },\n              title: { display: true, text: 'Maturity', font: { size: 14 } },\n              ticks: {\n                source: 'data',\n                autoSkip: false,\n                callback: function(val) {\n                  const match = chartData.datasets[0].data.find(d => d.x.getTime() === new Date(val).getTime());\n                  return match ? match.maturity : '';\n                },\n                minRotation: 45,\n                maxRotation: 45\n              },\n              grid: {\n                display: true,\n                drawTicks: true,  \n                borderColor: \"transparent\", //horizontal line color above ticks (x-axis)\n                color: \"transparent\",   //grid lines color\n                tickColor: \"#868e96\"  //ticks color (little line above points)\n              },\n              min: new Date(2000, 0, 1),\n              max: maturityToDate(filteredCurve[filteredCurve.length-1]?.maturity || '' )\n            },\n            y: {\n              beginAtZero: true,\n              min: 0,\n              max: 8.0,\n              title: { display: true, text: 'Treasury Par Rate', font: { size: 14 } },\n              grid: {\n                display: true,\n                drawTicks: true,  \n                borderColor: \"transparent\", //horizontal line color above ticks (x-axis)\n                color: \"transparent\",   //grid lines color\n                tickColor: \"#868e96\"  //ticks color (little line above points)\n              },\n            }\n          }\n        }} />\n      )}\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
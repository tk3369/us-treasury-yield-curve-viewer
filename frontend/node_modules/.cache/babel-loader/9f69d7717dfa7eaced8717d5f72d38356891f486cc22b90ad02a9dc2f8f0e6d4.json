{"ast":null,"code":"var _jsxFileName = \"/Users/tomkwong/CascadeProjects/yield-curve-viewer/frontend/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { Line } from 'react-chartjs-2';\nimport { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend, TimeScale } from 'chart.js';\nimport 'chartjs-adapter-date-fns';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend, TimeScale);\nconst API_BASE = 'http://localhost:4000/api';\nfunction App() {\n  _s();\n  var _curve$, _curve;\n  const [dates, setDates] = useState([]);\n  const [selectedDate, setSelectedDate] = useState('');\n  const [curve, setCurve] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState('');\n\n  // Fetch dates\n  useEffect(() => {\n    setError('');\n    fetch(`${API_BASE}/dates`).then(async res => {\n      if (!res.ok) throw new Error('Failed to fetch dates');\n      return res.json();\n    }).then(data => {\n      console.log('Fetched dates:', data.dates);\n      setDates(data.dates);\n      if (data.dates && data.dates.length > 0) {\n        setSelectedDate(data.dates[0]);\n      } else {\n        setError('No dates found.');\n      }\n    }).catch(err => {\n      console.error('Error loading dates:', err);\n      setError('Error loading dates: ' + err.message);\n      setDates([]);\n    });\n  }, []);\n\n  // Fetch curve for selected date\n  useEffect(() => {\n    if (!selectedDate) return;\n    setLoading(true);\n    setError('');\n    fetch(`${API_BASE}/yield-curve?date=${encodeURIComponent(selectedDate)}`).then(async res => {\n      if (!res.ok) {\n        const errJson = await res.json().catch(() => ({}));\n        throw new Error(errJson.error || 'Failed to fetch yield curve');\n      }\n      return res.json();\n    }).then(data => {\n      setCurve(data.curve || []);\n      setLoading(false);\n    }).catch(err => {\n      setError('Error loading yield curve: ' + err.message);\n      setCurve([]);\n      setLoading(false);\n    });\n  }, [selectedDate, dates]);\n\n  // Helper to convert maturity label to months\n  function maturityToMonths(label) {\n    const moMatch = label.match(/([\\d.]+)\\s*Mo/i);\n    if (moMatch) return parseFloat(moMatch[1]);\n    const yrMatch = label.match(/([\\d.]+)\\s*YR/i);\n    if (yrMatch) return parseFloat(yrMatch[1]) * 12;\n    return null;\n  }\n\n  // Helper: get pseudo-date for maturity (add N months to base date)\n  function maturityToDate(label) {\n    const base = new Date(2000, 0, 1); // Jan 1, 2000\n    const months = maturityToMonths(label);\n    if (months == null) return null;\n    const d = new Date(base);\n    d.setMonth(d.getMonth() + months);\n    return d;\n  }\n\n  // Prepare data for time x-axis\n  const chartData = {\n    datasets: [{\n      label: `Yield Curve (${selectedDate})`,\n      data: curve.map(pt => ({\n        x: maturityToDate(pt.maturity.replace(/Month/i, 'Mo')),\n        y: pt.rate,\n        maturity: pt.maturity.replace(/Month/i, 'Mo')\n      })),\n      fill: false,\n      borderColor: 'rgb(75, 192, 192)',\n      tension: 0.1\n    }]\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      maxWidth: 700,\n      margin: '40px auto',\n      fontFamily: 'sans-serif'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"US Treasury Yield Curve Viewer\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        color: 'red',\n        marginBottom: 16\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"b\", {\n        children: \"Error:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 11\n      }, this), \" \", error]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 9\n    }, this), dates.length === 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"No dates available.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"label\", {\n      children: [\"Select Date:\", ' ', /*#__PURE__*/_jsxDEV(\"select\", {\n        value: selectedDate,\n        onChange: e => setSelectedDate(e.target.value),\n        style: {\n          fontSize: '1rem',\n          margin: '0 10px'\n        },\n        children: dates.map(date => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: date,\n          children: date\n        }, date, false, {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 9\n    }, this), loading ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading chart...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(Line, {\n      data: chartData,\n      options: {\n        responsive: true,\n        parsing: false,\n        plugins: {\n          legend: {\n            position: 'top'\n          },\n          title: {\n            display: true,\n            text: 'Yield Curve'\n          },\n          tooltip: {\n            callbacks: {\n              title: items => items[0].raw.maturity,\n              label: item => `Rate: ${item.raw.y}`\n            }\n          }\n        },\n        scales: {\n          x: {\n            type: 'time',\n            time: {\n              unit: 'month',\n              displayFormats: {\n                month: 'MMM yyyy'\n              }\n            },\n            title: {\n              display: true,\n              text: 'Maturity',\n              font: {\n                size: 14\n              }\n            },\n            ticks: {\n              callback: function (val, idx, ticks) {\n                // Show the maturity label for each data point\n                const data = chartData.datasets[0].data;\n                const tickDate = new Date(val);\n                const match = data.find(d => d.x.getTime() === tickDate.getTime());\n                return match ? match.maturity : '';\n              },\n              autoSkip: false\n            },\n            min: maturityToDate(((_curve$ = curve[0]) === null || _curve$ === void 0 ? void 0 : _curve$.maturity) || '1 Mo'),\n            max: maturityToDate(((_curve = curve[curve.length - 1]) === null || _curve === void 0 ? void 0 : _curve.maturity) || '30 YR')\n          },\n          y: {\n            beginAtZero: true,\n            title: {\n              display: true,\n              text: 'Treasury Par Rate',\n              font: {\n                size: 14\n              }\n            }\n          }\n        }\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 122,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"MLaeS8zrPFodOrawl5KgVJ1i2WI=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","Line","Chart","ChartJS","CategoryScale","LinearScale","PointElement","LineElement","Title","Tooltip","Legend","TimeScale","jsxDEV","_jsxDEV","register","API_BASE","App","_s","_curve$","_curve","dates","setDates","selectedDate","setSelectedDate","curve","setCurve","loading","setLoading","error","setError","fetch","then","res","ok","Error","json","data","console","log","length","catch","err","message","encodeURIComponent","errJson","maturityToMonths","label","moMatch","match","parseFloat","yrMatch","maturityToDate","base","Date","months","d","setMonth","getMonth","chartData","datasets","map","pt","x","maturity","replace","y","rate","fill","borderColor","tension","style","maxWidth","margin","fontFamily","children","fileName","_jsxFileName","lineNumber","columnNumber","color","marginBottom","value","onChange","e","target","fontSize","date","options","responsive","parsing","plugins","legend","position","title","display","text","tooltip","callbacks","items","raw","item","scales","type","time","unit","displayFormats","month","font","size","ticks","callback","val","idx","tickDate","find","getTime","autoSkip","min","max","beginAtZero","_c","$RefreshReg$"],"sources":["/Users/tomkwong/CascadeProjects/yield-curve-viewer/frontend/src/App.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { Line } from 'react-chartjs-2';\nimport {\n  Chart as ChartJS,\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  Title,\n  Tooltip,\n  Legend,\n  TimeScale\n} from 'chart.js';\nimport 'chartjs-adapter-date-fns';\n\nChartJS.register(\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  Title,\n  Tooltip,\n  Legend,\n  TimeScale\n);\n\nconst API_BASE = 'http://localhost:4000/api';\n\nfunction App() {\n  const [dates, setDates] = useState([]);\n  const [selectedDate, setSelectedDate] = useState('');\n  const [curve, setCurve] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState('');\n\n  // Fetch dates\n  useEffect(() => {\n    setError('');\n    fetch(`${API_BASE}/dates`)\n      .then(async res => {\n        if (!res.ok) throw new Error('Failed to fetch dates');\n        return res.json();\n      })\n      .then(data => {\n        console.log('Fetched dates:', data.dates);\n        setDates(data.dates);\n        if (data.dates && data.dates.length > 0) {\n          setSelectedDate(data.dates[0]);\n        } else {\n          setError('No dates found.');\n        }\n      })\n      .catch(err => {\n        console.error('Error loading dates:', err);\n        setError('Error loading dates: ' + err.message);\n        setDates([]);\n      });\n  }, []);\n\n  // Fetch curve for selected date\n  useEffect(() => {\n    if (!selectedDate) return;\n    setLoading(true);\n    setError('');\n    fetch(`${API_BASE}/yield-curve?date=${encodeURIComponent(selectedDate)}`)\n      .then(async res => {\n        if (!res.ok) {\n          const errJson = await res.json().catch(() => ({}));\n          throw new Error(errJson.error || 'Failed to fetch yield curve');\n        }\n        return res.json();\n      })\n      .then(data => {\n        setCurve(data.curve || []);\n        setLoading(false);\n      })\n      .catch(err => {\n        setError('Error loading yield curve: ' + err.message);\n        setCurve([]);\n        setLoading(false);\n      });\n  }, [selectedDate, dates]);\n\n  // Helper to convert maturity label to months\n  function maturityToMonths(label) {\n    const moMatch = label.match(/([\\d.]+)\\s*Mo/i);\n    if (moMatch) return parseFloat(moMatch[1]);\n    const yrMatch = label.match(/([\\d.]+)\\s*YR/i);\n    if (yrMatch) return parseFloat(yrMatch[1]) * 12;\n    return null;\n  }\n\n  // Helper: get pseudo-date for maturity (add N months to base date)\n  function maturityToDate(label) {\n    const base = new Date(2000, 0, 1); // Jan 1, 2000\n    const months = maturityToMonths(label);\n    if (months == null) return null;\n    const d = new Date(base);\n    d.setMonth(d.getMonth() + months);\n    return d;\n  }\n\n  // Prepare data for time x-axis\n  const chartData = {\n    datasets: [\n      {\n        label: `Yield Curve (${selectedDate})`,\n        data: curve.map(pt => ({\n          x: maturityToDate(pt.maturity.replace(/Month/i, 'Mo')),\n          y: pt.rate,\n          maturity: pt.maturity.replace(/Month/i, 'Mo'),\n        })),\n        fill: false,\n        borderColor: 'rgb(75, 192, 192)',\n        tension: 0.1,\n      },\n    ],\n  };\n\n\n  return (\n    <div style={{ maxWidth: 700, margin: '40px auto', fontFamily: 'sans-serif' }}>\n      <h2>US Treasury Yield Curve Viewer</h2>\n      {error && (\n        <div style={{ color: 'red', marginBottom: 16 }}>\n          <b>Error:</b> {error}\n        </div>\n      )}\n      {dates.length === 0 ? (\n        <div>No dates available.</div>\n      ) : (\n        <label>\n          Select Date:{' '}\n          <select\n            value={selectedDate}\n            onChange={e => setSelectedDate(e.target.value)}\n            style={{ fontSize: '1rem', margin: '0 10px' }}\n          >\n            {dates.map(date => (\n              <option key={date} value={date}>{date}</option>\n            ))}\n          </select>\n        </label>\n      )}\n      {loading ? (\n        <div>Loading chart...</div>\n      ) : (\n        <Line data={chartData} options={{\n          responsive: true,\n          parsing: false,\n          plugins: {\n            legend: { position: 'top' },\n            title: { display: true, text: 'Yield Curve' },\n            tooltip: {\n              callbacks: {\n                title: (items) => items[0].raw.maturity,\n                label: (item) => `Rate: ${item.raw.y}`\n              }\n            }\n          },\n          scales: {\n            x: {\n              type: 'time',\n              time: {\n                unit: 'month',\n                displayFormats: {\n                  month: 'MMM yyyy'\n                }\n              },\n              title: {\n                display: true,\n                text: 'Maturity',\n                font: { size: 14 }\n              },\n              ticks: {\n                callback: function(val, idx, ticks) {\n                  // Show the maturity label for each data point\n                  const data = chartData.datasets[0].data;\n                  const tickDate = new Date(val);\n                  const match = data.find(d => d.x.getTime() === tickDate.getTime());\n                  return match ? match.maturity : '';\n                },\n                autoSkip: false\n              },\n              min: maturityToDate(curve[0]?.maturity || '1 Mo'),\n              max: maturityToDate(curve[curve.length-1]?.maturity || '30 YR')\n            },\n            y: {\n              beginAtZero: true,\n              title: {\n                display: true,\n                text: 'Treasury Par Rate',\n                font: { size: 14 }\n              }\n            }\n          }\n        }} />\n      )}\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"var _jsxFileName = \"/Users/tomkwong/CascadeProjects/yield-curve-viewer/frontend/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { Line } from 'react-chartjs-2';\nimport { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend } from 'chart.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend);\nconst API_BASE = 'http://localhost:4000/api';\nfunction App() {\n  _s();\n  const [dates, setDates] = useState([]);\n  const [selectedDate, setSelectedDate] = useState('');\n  const [curve, setCurve] = useState([]);\n  const [loading, setLoading] = useState(false);\n  useEffect(() => {\n    fetch(`${API_BASE}/dates`).then(res => res.json()).then(data => {\n      setDates(data.dates);\n      if (data.dates.length > 0) setSelectedDate(data.dates[0]);\n    });\n  }, []);\n  useEffect(() => {\n    if (!selectedDate) return;\n    setLoading(true);\n    fetch(`${API_BASE}/yield-curve?date=${encodeURIComponent(selectedDate)}`).then(res => res.json()).then(data => {\n      setCurve(data.curve || []);\n      setLoading(false);\n    });\n  }, [selectedDate]);\n  const chartData = {\n    labels: curve.map(pt => pt.maturity),\n    datasets: [{\n      label: `Yield Curve (${selectedDate})`,\n      data: curve.map(pt => pt.rate),\n      fill: false,\n      borderColor: 'rgb(75, 192, 192)',\n      tension: 0.1\n    }]\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      maxWidth: 700,\n      margin: '40px auto',\n      fontFamily: 'sans-serif'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"US Treasury Yield Curve Viewer\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      children: [\"Select Date:\", ' ', /*#__PURE__*/_jsxDEV(\"select\", {\n        value: selectedDate,\n        onChange: e => setSelectedDate(e.target.value),\n        style: {\n          fontSize: '1rem',\n          margin: '0 10px'\n        },\n        children: dates.map(date => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: date,\n          children: date\n        }, date, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this), loading ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading chart...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(Line, {\n      data: chartData,\n      options: {\n        responsive: true,\n        plugins: {\n          legend: {\n            position: 'top'\n          },\n          title: {\n            display: true,\n            text: 'Yield Curve'\n          }\n        }\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"8qM0Lyx+w/busnsHabAuSinaneM=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","Line","Chart","ChartJS","CategoryScale","LinearScale","PointElement","LineElement","Title","Tooltip","Legend","jsxDEV","_jsxDEV","register","API_BASE","App","_s","dates","setDates","selectedDate","setSelectedDate","curve","setCurve","loading","setLoading","fetch","then","res","json","data","length","encodeURIComponent","chartData","labels","map","pt","maturity","datasets","label","rate","fill","borderColor","tension","style","maxWidth","margin","fontFamily","children","fileName","_jsxFileName","lineNumber","columnNumber","value","onChange","e","target","fontSize","date","options","responsive","plugins","legend","position","title","display","text","_c","$RefreshReg$"],"sources":["/Users/tomkwong/CascadeProjects/yield-curve-viewer/frontend/src/App.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { Line } from 'react-chartjs-2';\nimport {\n  Chart as ChartJS,\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  Title,\n  Tooltip,\n  Legend,\n} from 'chart.js';\n\nChartJS.register(\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  Title,\n  Tooltip,\n  Legend\n);\n\nconst API_BASE = 'http://localhost:4000/api';\n\nfunction App() {\n  const [dates, setDates] = useState([]);\n  const [selectedDate, setSelectedDate] = useState('');\n  const [curve, setCurve] = useState([]);\n  const [loading, setLoading] = useState(false);\n\n  useEffect(() => {\n    fetch(`${API_BASE}/dates`)\n      .then(res => res.json())\n      .then(data => {\n        setDates(data.dates);\n        if (data.dates.length > 0) setSelectedDate(data.dates[0]);\n      });\n  }, []);\n\n  useEffect(() => {\n    if (!selectedDate) return;\n    setLoading(true);\n    fetch(`${API_BASE}/yield-curve?date=${encodeURIComponent(selectedDate)}`)\n      .then(res => res.json())\n      .then(data => {\n        setCurve(data.curve || []);\n        setLoading(false);\n      });\n  }, [selectedDate]);\n\n  const chartData = {\n    labels: curve.map(pt => pt.maturity),\n    datasets: [\n      {\n        label: `Yield Curve (${selectedDate})`,\n        data: curve.map(pt => pt.rate),\n        fill: false,\n        borderColor: 'rgb(75, 192, 192)',\n        tension: 0.1,\n      },\n    ],\n  };\n\n  return (\n    <div style={{ maxWidth: 700, margin: '40px auto', fontFamily: 'sans-serif' }}>\n      <h2>US Treasury Yield Curve Viewer</h2>\n      <label>\n        Select Date:{' '}\n        <select\n          value={selectedDate}\n          onChange={e => setSelectedDate(e.target.value)}\n          style={{ fontSize: '1rem', margin: '0 10px' }}\n        >\n          {dates.map(date => (\n            <option key={date} value={date}>{date}</option>\n          ))}\n        </select>\n      </label>\n      {loading ? (\n        <div>Loading chart...</div>\n      ) : (\n        <Line data={chartData} options={{\n          responsive: true,\n          plugins: {\n            legend: { position: 'top' },\n            title: { display: true, text: 'Yield Curve' },\n          },\n        }} />\n      )}\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}